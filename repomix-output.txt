This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-19T19:16:17.816Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.cursor/
  rules/
    documentation.mdc
    instructions.mdc
.docs/
  auth.md
  design.md
  prd.md
  prd2.md
assets/
  css/
    global.css
components/
  AppButton.vue
  AppCard.vue
  AppSpinner.vue
  ErrorBanner.vue
  GoogleSignInButton.vue
  LogoutButton.vue
layouts/
  default.vue
pages/
  auth/
    callback.vue
  dashboard.vue
  index.vue
  login.vue
  settings.vue
plugins/
  supabase.client.ts
public/
  robots.txt
server/
  tsconfig.json
.gitignore
.repomixignore
app.vue
eslint.config.mjs
nuxt.config.ts
package.json
README.md
repomix.config.json
tsconfig.json

================================================================
Files
================================================================

================
File: .cursor/rules/documentation.mdc
================
---
description: Global documentation requirements
globs: 
alwaysApply: true
---
## Documentation Requirements

- After implementing each feature, update documentation in the `/.docs` directory; do not update requirements until user has confirmed feature is done
- Create or update a feature-specific Markdown file (e.g., `/.docs/design/feature4_steering-controls.md`)
- Documentation must include:
  - Mermaid diagrams showing the architecture/component relationships
  - Text descriptions explaining key concepts and design decisions
  - Function interaction diagrams (for complex features)
  - Any API interfaces or important type definitions
- Follow this structure for each feature document:
  1. Feature overview (brief description)
  2. Architecture diagram (Mermaid)
  3. Key components and their responsibilities
  4. Data flow explanation
  5. Function Call Graph (Mermaid) that:
     - Map how functions call each other within files and across the codebase
     - Visualize data flow between key functions
     - Highlight dependencies between different modules
     - Group related functions by color or container to show logical domains
     - Use Mermaid flowcharts with nodes representing functions and arrows showing call/data relationships
     - For complex features, include a separate "Function Call Graph" section with detailed interaction maps
  6. API documentation (if applicable)
  7. Implementation notes or considerations
- Link to relevant documentation in commit messages when submitting changes
- Include function interaction diagrams that:

================
File: .cursor/rules/instructions.mdc
================
---
description: Global rues across the codebase
globs: 
alwaysApply: true
---
# Cursor Rules

You are a senior Nuxt.js web developer. You write functional, DRY, performant, efficient code, which has both great design and also exceptional UX/UI.

## Core Principles

- Do not make any changes I have not asked for. If you want to make changes I have not asked for, add them to the todo.md for future consideration, unless they are urgent, then ask me what I think before making the changes.
- Use functional, declarative programming; avoid classes
- Follow DRY principles: pr5ioritize iteration and modularization, always extract reusable functions
- Maintain code readability by limiting files to approximately 200 lines of code; extract reusable functions into separate utility modules in a utils/ directory when a file approaches this limit
- Implement early error handling with guard clauses and early returns
- Always review ``.docs/prd.md` for context
- Add any outstanding/not completed work for what you're currently building to `.docs/todo.md`
- Add any proposed enhancements to `.docs/enhancements.md`
- After each feature is implemented, update a `.docs/design` which uses mermaid diagrams and text to describe how the codebase works
- Make sure the follow the best practices for maintaining a clean code architecture

## JavaScript

- Write clean, concise JavaScript
- Use `function` keyword for pure functions; omit semicolons
- For single-line conditional statements, omit curly braces: `if (!isValid) return`
- Avoid unnecessary `else` statements; use `if-return` pattern

## Vue 3 & Composition API

- Leverage Composition API (`ref`, `reactive`, `computed`); avoid Options API
- Implement custom composables for reusable logic
- Use provide/inject for dependency injection when appropriate
- Use Suspense for asynchronous components

## Nuxt 3 Framework

- Follow Nuxt 3 directory structure (`pages/`, `components/`, `composables/`, etc.)
- Leverage auto-imports for components, composables, and Vue APIs
- Use `useHead` and `useSeoMeta` for SEO optimization
- Server API routes in `server/api/` for backend operations
- Use `useRuntimeConfig` for environment-specific configuration

## CSS & Styling

- No inline CSS; use `<style scoped>` or external CSS files
- Implement responsive design with media queries
- Keep global reset styles in `assets/css/global.css`

## Project Structure

- Component files: PascalCase (e.g., `MyComponent.vue`)
- Composables: `use<MyComposable>` format with named exports
- Directories: lowercase with dashes (e.g., `components/auth-wizard`)
- Key directories:
  - `pages/`: Route-based components
  - `components/`: Reusable Vue components
  - `composables/`: Reusable logic
  - `layouts/`: Page layouts
  - `plugins/`: Nuxt plugins
  - `public/`: Static assets
  - `server/`: Server-side code and API endpoints
  - `assets/css/`: Global styles

## Performance Optimization

- Implement lazy loading for routes and components
- Optimize images: WebP format, size attributes, lazy loading
- Optimize Core Web Vitals (LCP, CLS, FID)
- Use Pinia for state management only when app-wide state is needed
- Leverage VueUse for common utility functions

================
File: .docs/auth.md
================
# Updated Requirements: Supabase Auth with Gmail‑Readonly Scope

## 2.1.1 Authentication & Authorization (Revised)
1. **User Sign‑In**  
   - Single “Sign in with Google” flow via Supabase Auth.  
   - Request scopes:  
     <code>openid email profile https://www.googleapis.com/auth/gmail.readonly</code>  
   - Implementation example:  
     <code>const { data, error } = await supabase.auth.signInWithOAuth({  
       provider: 'google',  
       options: {  
         scopes: 'openid email profile https://www.googleapis.com/auth/gmail.readonly'  
       }  
     })</code>  
   - On success, Supabase returns a session that includes <code>provider_token</code> for Gmail API calls.

2. **Token Management**  
   - Supabase Auth automatically handles token refresh.  
   - Access <code>supabase.auth.getSession()</code> or listen to <code>onAuthStateChange</code> to retrieve <code>provider_token</code> when needed.

---

## 4.X Front‑End Requirements

### Pages & Components

#### 1. Login Page (`/pages/login.vue`)
- **Components**  
  - `<GoogleSignInButton>` with Google icon and label “Sign in with Google”  
  - `<ErrorBanner>` to display authentication errors  
- **Behavior**  
  1. User clicks the Google button  
  2. Call <code>supabase.auth.signInWithOAuth(…)</code>  
  3. Show loading spinner until redirect  
  4. After redirect to `/auth/callback`, complete sign‑in  

#### 2. OAuth Callback (`/pages/auth/callback.vue`)
- **Logic**  
  1. Call <code>await supabase.auth.getSessionFromUrl()</code>  
  2. If success → navigate to `/dashboard`  
  3. If error → display `<ErrorBanner>` with retry link  

#### 3. Dashboard (`/pages/dashboard.vue`)
- **Header**  
  - Display user’s avatar and email from <code>supabase.auth.getUser()</code>  
  - `<LogoutButton>` calls <code>supabase.auth.signOut()</code>  
- **Main Content**  
  - **SubscriptionSummary** component showing total spend and upcoming renewals  
  - **SubscriptionList** component listing each vendor, amount, next renewal  
  - `<Button>` “Refresh Emails” to trigger Gmail fetch manually  

#### 4. Settings (`/pages/settings.vue`)
- **Sections**  
  - **Re‑Consent Gmail Access**  
    - If the session’s scopes don’t include Gmail, show a banner with a “Grant Access” button that calls the same <code>signInWithOAuth</code> with extended scopes.  
  - **Session Info**  
    - Display granted scopes and token expiry from <code>supabase.auth.getSession()</code>.  

---

### UI States & Flows

1. **Not Authenticated**  
   - ↳ Render **Login Page**

2. **Authenticated but Missing Gmail Scope**  
   - ↳ On any page, show `<ScopeNotice>` banner with “Grant Gmail Access” button

3. **Authenticated & Gmail Scope Granted**  
   - ↳ Render **Dashboard** and allow full email‑parsing functionality

4. **Token Expired or Revoked**  
   - ↳ Supabase emits `SIGNED_OUT` → redirect to **Login Page**

================
File: .docs/design.md
================
# UI/UX Requirements (Vanilla CSS)

## 1. Design Principles
- **Clean & Minimal**  
  Use plain CSS (no frameworks). Leverage white space, clear typography, and simple layouts.  
- **Modern & Animated**  
  Subtle CSS transitions and keyframe animations to enhance feedback (e.g., button hovers, card fades).  
- **Responsive & Inclusive**  
  Mobile‑first media queries and fluid layouts; accessible colors & focus styles.  
- **Consistent & Predictable**  
  Reuse CSS variables for colors, spacing, typography; follow a naming convention (e.g. BEM or utility classes).

---

## 2. Global Layout & Navigation
1. **Header**  
   - Fixed at top, flex‑box layout  
   - Logo on left, nav links in center, user avatar on right  
   - Simple hover underline animations on links
2. **Main Content Area**  
   - Centered container (max-width: 1200px)  
   - 12‑column grid via CSS Grid for desktop; single column on mobile  
3. **Footer (optional)**  
   - Centered text, small font, muted color  

---

## 3. Page Flows & Wireframes

### 3.1 Login Page  
- **Hero Section:**  
  - Heading, subheading  
  - Centered `<button>` with Google icon  
  - CSS transition on hover (background‐color, box‐shadow)  
- **Error State:**  
  - Inline alert `<div>` with slide‐down animation  

### 3.2 OAuth Callback  
- **Full‐Screen Loader:**  
  - Centered spinner using CSS keyframes  
  - Message: “Signing you in…”  

### 3.3 Dashboard  
- **Header Bar:**  
  - Prominent total spend `<h1>`  
  - `<button>` “Refresh Emails” with ripple effect on click  
- **Sections:**  
  1. **Spending Overview Card**  
     - Fade‐in on load  
  2. **Upcoming Renewals**  
     - Table or card list; row hover highlight  
  3. **Category Breakdown**  
     - Simple bar/pie chart placeholder (can be SVG or Canvas)  
- **Empty State:**  
  - Illustrated SVG or CSS drawing + subtle bounce animation  

### 3.4 Subscription List  
- **Item Layout:**  
  - Flex layout: icon, text, next date, action icon  
  - “Ignore” icon with rotate‐on‐hover animation  

### 3.5 Settings  
- **Forms & Controls:**  
  - Styled `<input>`, `<select>`, and radio buttons with focus ring transitions  
  - Banner to re‑grant Gmail access with slide‐in animation  

### 3.6 Digest Preview (Modal)  
- **Modal Overlay:**  
  - Semi‑opaque backdrop  
  - Modal card slides down on open, slides up on close  

---

## 4. Components & Interactions

| Component                 | Vanilla CSS Notes                                                 |
|---------------------------|-------------------------------------------------------------------|
| `<button>`                | Reset browser styles; padding, border‐radius, transition on hover |
| `<card>` (div.container)  | White background, box‐shadow, border‐radius, padding              |
| `<input>`                 | Border‐bottom highlight on focus, transition                       |
| `.spinner`                | `<div>` with CSS keyframes for rotation                           |
| `.alert`                  | Red background, fade‐in/out, role="alert"                         |
| `.modal`                  | Fixed position, opacity transition, transform for slide effect     |

---

## 5. Style Guide

- **CSS Variables** (in :root):  
  <code>:root {  
    --color-bg: #ffffff;  
    --color-text: #1f2937;  
    --color-accent: #4f46e5;  
    --space-sm: 8px;  
    --space-md: 16px;  
    --space-lg: 24px;  
    --font-base: 16px;  
  }</code>

- **Colors**  
  - Background: <code>var(--color-bg)</code>  
  - Text: <code>var(--color-text)</code>  
  - Accent (buttons, links): <code>var(--color-accent)</code>  
- **Typography**  
  - Base font-size: <code>var(--font-base)</code> (1rem)  
  - Headings: scale 1.5–2rem, font-weight 600–700  
- **Spacing**  
  - Use <code>var(--space-*)</code> for margin/padding  

---

## 6. Accessibility & Responsiveness

- **Keyboard Navigation**  
  - Ensure `<button>` and `<a>` have visible focus styles  
- **ARIA Attributes**  
  - `<div role="alert">` for errors; `<div aria-busy="true">` during loads  
- **Media Queries**  
  <code>@media (min-width: 640px) { … }</code> mobile → tablet  
  <code>@media (min-width: 1024px) { … }</code> tablet → desktop  

---

## 7. Developer Handoff

- Provide simple HTML/CSS prototypes or code snippets  
- Share CSS variable file and reset stylesheet  
- Include comments in CSS for component sections and animations

================
File: .docs/prd.md
================
# Requirements, Architecture, and Technical Design with Supabase

## 1. Introduction

This document outlines the requirements and technical design for a subscription-tracking web application built with **Nuxt.js**. The application will connect to a user’s Gmail account (via OAuth) to parse subscription-related emails, categorize them, calculate total subscription costs, and provide digest notifications. **In this iteration, we use [Supabase](https://supabase.com/) as the backend for both database and authentication layers.**

## 2. Requirements

### 2.1 Functional Requirements (MVP)
1. **User Authentication & Authorization**
   - Users can sign in with Google (OAuth 2.0).
   - Read-only access to Gmail (scope: <code>https://www.googleapis.com/auth/gmail.readonly</code>).
   - Optionally, leverage Supabase Auth (if needed) for additional security or user management features.

2. **Email Parsing**
   - Search emails for subscription-related keywords (<code>"subscription", "receipt", "invoice", "payment"</code>).
   - Extract relevant data:
     - Sender
     - Subject
     - Date
     - Amount
     - Vendor Name
   - Use regex or an LLM-based approach to parse the email bodies for key values (amount, subscription date, etc.).

3. **Basic Categorization**
   - Hardcode vendor-to-category mapping (e.g., Netflix → “Streaming”).
   - Store category along with subscription info.

4. **Dashboard View**
   - Display:
     - Total monthly spending
     - List of subscriptions: vendor, amount, renewal cycle, next due date
   - Allow user to see aggregated data by category or vendor.

5. **Digest Delivery**
   - Send digest notifications via email or in-app message.
   - Digest includes:
     - Total spend in the current month
     - Breakdown by category and vendor
     - Upcoming renewal dates

6. **User Settings**
   - User can select digest frequency (weekly or monthly).
   - User can ignore (or remove) certain subscriptions.

### 2.2 Nice-to-Have Features (Future Enhancements)
1. **Automatic Renewal Cycle Detection**  
   - Infer monthly, yearly, or other intervals from email content and patterns.
2. **More Sophisticated Categorization**  
   - ML or advanced rule-based system for vendor categorization.
3. **Analytics & Charts**  
   - Historical spending trends and interactive charts.
4. **Mobile App/PWA**  
   - Provide push notifications for upcoming renewals.
5. **Multi-Email Support**  
   - Connect multiple Gmail accounts to one user profile.

### 2.3 Non-Functional Requirements
1. **Security**  
   - Use Supabase Auth for storing user tokens securely (or handle within your own system).
2. **Performance**  
   - Optimized queries and background jobs to handle email parsing efficiently.
3. **Scalability**  
   - Supabase scales with the project (Postgres under the hood, horizontally scalable).
4. **Maintainability**  
   - Modular architecture for adding more categories, data models, or email parsing rules in the future.

---

## 3. High-Level Architecture

1. **Client (Nuxt.js)**  
   - UI for user interactions, dashboards, and settings.
   - Integration with Gmail OAuth flow and Supabase Auth.

2. **Supabase**  
   - **Database**: PostgreSQL managed by Supabase.
   - **Auth**: (Optional) use Supabase Auth for session management or integrate your own Google OAuth with Gmail read-only scope.
   - **API / Edge Functions**: If needed, use Supabase’s Edge Functions for serverless logic (e.g., digest scheduling, email parsing).

3. **Gmail API**  
   - OAuth 2.0 for secure access to read emails.
   - Gmail REST API to fetch and parse incoming messages.

4. **Scheduled/Background Jobs**  
   - Could be implemented using Supabase Edge Functions + cron triggers or an external CRON-based system for digest sending and email scanning.

5. **Email Delivery**  
   - Use an email service (SendGrid, AWS SES, or Gmail API) to send digests and notifications.

---

## 4. Technical Design

### 4.1 Technology Stack
- **Front End**: Nuxt.js (Vue 3, optional TypeScript).
- **Supabase**:
  - **Database**: PostgreSQL (managed by Supabase).
  - **Auth**: Use Supabase’s built-in Auth or keep user tokens yourself.
  - **Edge Functions**: For serverless functionality if needed.
- **Authentication**: Google OAuth 2.0 (for Gmail).
- **Email Parsing**: Gmail API, plus regex or LLM approach.
- **Email Delivery**: Third-party service or Gmail API for sending.

### 4.2 Data Flow Overview
1. **User Signs In**  
   - Via Google OAuth or Supabase Auth (depending on setup).
   - On success, user’s data is stored in Supabase DB or just session data is stored.  
2. **Email Retrieval**  
   - Use the Gmail API with the user’s tokens to fetch messages containing relevant keywords.
3. **Parsing & Categorization**  
   - Identify subscription info in messages.
   - Store in Supabase table with vendor, amount, next renewal, etc.
4. **Dashboard & Digest**  
   - Show aggregated data in Nuxt.js UI.
   - Generate and email periodic digests to the user.

### 4.3 Supabase Database Structure

*(See next code block for exact CREATE TABLE queries.)*

- **Users Table**  
  Stores user profile details and possibly links to Supabase Auth ID or Google ID.
- **Subscriptions Table**  
  Holds user subscriptions with vendor details, amounts, next renewal, category, etc.
- **Email Logs Table**  
  Optionally store raw email references or parsed info for debugging.

### 4.4 Gmail Integration
1. **OAuth 2.0 Flow**  
   - Obtain read-only access token for Gmail.
   - Store tokens in Supabase or rely on ephemeral token usage.  
2. **Messages Fetch**  
   - Use the Gmail API (`/gmail/v1/users/{userId}/messages`) with query params like `<code>subscription OR receipt OR invoice OR payment</code>`.
3. **Parsing Logic**  
   - Regex to detect amounts, vendor names, subscription dates.
   - Or use an LLM-based approach.

### 4.5 Categorization
- Define a dictionary for vendor-to-category mapping.
- Example:
  <code>{
    "Netflix": "Streaming",
    "Spotify": "Music",
    ...
  }</code>
- Default to “Uncategorized” if no match.

### 4.6 Dashboard & UI
1. **Login Page**  
   - Google OAuth or Supabase Auth.  
2. **Main Dashboard**  
   - Monthly subscription totals, upcoming renewals, vendor list.  
3. **Settings**  
   - Update digest frequency, exclude or ignore subscriptions.

### 4.7 Digest Delivery
1. **Frequency**  
   - Weekly or monthly, configured per user.  
2. **Scheduler**  
   - Could use Supabase’s [Scheduled Triggers](https://supabase.com/docs/guides/database/scheduled-triggers) or an external service to run daily checks.  
3. **Notification**  
   - Summarize monthly spend, breakdown, upcoming renewals.  
   - Send email via a third-party service or directly via Gmail API.

### 4.8 Implementation Steps
1. **Nuxt.js Setup**: `npx nuxi init subscription-tracker`  ✅ COMPLETE
2. **Supabase Project**  ✅ COMPLETE
   - Create a new project on supabase.com.  
   - Get project URL, anon key, service role key, etc.  
3. **Database & Tables**  ✅ COMPLETE
   - Use the provided SQL to create tables.  
4. **Configure Supabase Client** in Nuxt  ✅ COMPLETE
   - Install `@supabase/supabase-js`.  
   - Provide your `SUPABASE_URL` and `SUPABASE_ANON_KEY`.  
5. **OAuth Integration**  
   - If you’re using Google OAuth for Gmail in addition to Supabase Auth, ensure to handle token storage.  
6. **Gmail Parsing & Subscription Handling**  
   - Implement the fetch + parse logic, store results in Supabase.  
7. **Digest Scheduling**  
   - Use Supabase Scheduled Triggers or external cron.  
8. **UI/UX Polishing & Testing**.

---

## 5. Supabase SQL Queries

<code>
-- USERS TABLE
CREATE TABLE users (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  google_id text UNIQUE,
  email text NOT NULL,
  digest_frequency text DEFAULT 'monthly',
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- SUBSCRIPTIONS TABLE
CREATE TABLE subscriptions (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id uuid REFERENCES users (id) ON DELETE CASCADE,
  vendor_name text,
  category text,
  amount numeric(10,2),
  currency text DEFAULT 'USD',
  next_renewal_date date,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- EMAIL LOGS TABLE
CREATE TABLE email_logs (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id uuid REFERENCES users (id) ON DELETE CASCADE,
  gmail_message_id text,
  extracted_amount numeric(10,2),
  vendor_name text,
  subscription_date timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);
</code>

================
File: .docs/prd2.md
================
# Requirements, Architecture & Technical Design  
### *Subscription Tracker — Supabase‑only Google Auth Edition*  

---

## 1 Introduction  

This Nuxt 3 web application tracks recurring payments by reading a user’s Gmail inbox.  
All authentication and Gmail access are handled **exclusively** by **Supabase Auth** (Google provider).  
The Gmail address chosen at sign‑in is the same mailbox read with scope  
<code>https://www.googleapis.com/auth/gmail.readonly</code>.  
No other OAuth flow or provider is supported in this iteration.

---

## 2 Requirements  

### 2.1 Functional Requirements (MVP)  

| ID | Requirement | Notes |
| --- | --- | --- |
| **FR‑01** | **Google Sign‑in via Supabase Auth** | Scope: <code>openid email profile https://www.googleapis.com/auth/gmail.readonly</code>. One consent screen grants sign‑in **and** Gmail read‑only. |
| **FR‑02** | **Immediate Gmail Sync** | After first login, backend enqueues <code>syncGmail()</code> to pull the latest threads. |
| **FR‑03** | **Email Parsing** | Query: <code>"subscription" OR "receipt" OR "invoice" OR "payment"</code>. Extract sender, subject, date, amount, vendor. Regex first; LLM later. |
| **FR‑04** | **Basic Categorization** | Hard‑coded vendor→category map (Netflix → Streaming, etc.). |
| **FR‑05** | **Dashboard** | Shows totals, renewals, breakdown. Data served by REST; UI never calls Gmail. |
| **FR‑06** | **Digest Notifications** | Weekly / monthly email or in‑app digest with spend summary. |
| **FR‑07** | **User Settings** | Digest frequency, ignore subscriptions, revoke / re‑grant Gmail scope. |

### 2.2 Nice‑to‑Have (Deferred)  

* Renewal‑cycle inference, ML categorization, historical charts, PWA push, multi‑email support.  

### 2.3 Non‑Functional Requirements  

| Category | Detail |
| --- | --- |
| **Security** | Supabase stores OAuth refresh tokens; Edge Function uses per‑user row‑level security. |
| **Performance** | Gmail fetch & parse in Edge Function; dashboard hits pre‑aggregated SQL view. |
| **Scalability** | Supabase Postgres + stateless Edge Functions; cron can scale horizontally. |
| **Maintainability** | Domain logic in composables / server utils; ≤ 200 LOC per file. |

---

## 3 High‑Level Architecture  

| Layer | Responsibility |
| --- | --- |
| **Nuxt Client** | UI & routing, calls backend REST, never touches Gmail directly. |
| **Supabase Auth** | Google provider, token refresh, exposes <code>provider_token</code>. |
| **Supabase DB** | Tables: <code>users</code>, <code>subscriptions</code>, <code>email_logs</code>. |
| **Edge Function syncGmail** | Pulls, parses, stores Gmail data; triggered on login & nightly cron. |
| **REST API** | <code>/api/subscriptions/summary</code>, <code>/api/subscriptions/list</code>, etc. |
| **Digest Scheduler** | Cron checks who needs digests; sends email via SendGrid. |
| **Gmail API** | Read‑only access using Supabase‑issued <code>provider_token</code>. |

---

## 4 Technical Design  

### 4.1 Authentication Flow  

<code>
1. Client ➜ supabase.auth.signInWithOAuth  
   • scopes: openid email profile https://www.googleapis.com/auth/gmail.readonly  
2. Google consent (single screen).  
3. Redirect ➜ /auth/callback.  
4. Page calls supabase.auth.getSessionFromUrl().  
5. Session now contains provider_token + refresh_token.  
6. Server hook enqueues syncGmail(userId) immediately.  
</code>

### 4.2 Data Flow Diagram (Mermaid)  

<code>
flowchart LR
  A[User Login] --> B(Supabase Auth\nGoogle Provider)
  B -->|session + provider_token| C(Nuxt Client)
  C -->|enqueue| D[Edge Function syncGmail]
  D --> E(Gmail API)
  E --> D
  D --> F(Supabase DB)
  F --> G[/api/subscriptions/summary]
  G --> C
  F --> H(Digest Scheduler)
  H --> I(SendGrid)
</code>

### 4.3 Edge Function syncGmail() Algorithm  

<code>
1. Verify event source (login trigger or nightly cron).  
2. Fetch provider_token from Supabase for userId.  
3. Gmail users.messages.list with query string.  
4. For each message ID:  
   • users.messages.get (metadata only)  
   • regex parse amount, vendor, renewal date  
5. Upsert into subscriptions; insert into email_logs.  
6. If Gmail scope revoked ⇒ mark user.needs_regrant = true.  
</code>

### 4.4 Database Schema  

<code>
-- USERS  
CREATE TABLE users (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  google_id text UNIQUE,
  email text NOT NULL,
  digest_frequency text DEFAULT 'monthly',
  needs_regrant boolean DEFAULT false,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- SUBSCRIPTIONS  
CREATE TABLE subscriptions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES users(id) ON DELETE CASCADE,
  vendor_name text,
  category text,
  amount numeric(10,2),
  currency text DEFAULT 'USD',
  next_renewal_date date,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- EMAIL_LOGS  
CREATE TABLE email_logs (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES users(id) ON DELETE CASCADE,
  gmail_message_id text,
  extracted_amount numeric(10,2),
  vendor_name text,
  subscription_date timestamptz,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);
</code>

---

## 5 Front‑End Specification  

### 5.1 Pages & Key Components  

| Page | Components | States |
| --- | --- | --- |
| **/login** | <code>&lt;GoogleSignInButton&gt;</code>, <code>&lt;ErrorBanner&gt;</code> | idle, loading, error |
| **/auth/callback** | <code>&lt;AppSpinner&gt;</code> | processing, error |
| **/** (dashboard) | header (avatar, email, logout) · <code>&lt;SubscriptionSummary&gt;</code> · <code>&lt;SubscriptionList&gt;</code> · chart placeholder | loading, data, empty |
| **/settings** | <code>&lt;DigestPrefsForm&gt;</code> · <code>&lt;GmailAccessCard&gt;</code> | normal, needsReGrant |

### 5.2 UI States & Routing Rules  

| Condition | Behaviour |
| --- | --- |
| No Supabase session | Redirect to **/login** |
| Session but Gmail scope revoked | Global <code>&lt;ScopeNotice&gt;</code> with “Grant Gmail Access” |
| Session OK | Normal navigation |
| Supabase emits SIGNED_OUT | Force logout ➜ /login |

---

## 6 Backend REST API Contract  

| Route | Method | Purpose |
| --- | --- | --- |
| /api/subscriptions/summary | GET | Returns totals, category & vendor aggregates, next renewals. |
| /api/subscriptions/list | GET | Paginated raw subscription rows. |
| /api/digest/trigger | POST | (Admin) trigger digest email manually. |

All routes require the Supabase JWT from <code>Authorization: Bearer &lt;token&gt;</code>.

---

## 7 Implementation Checklist  

1. Nuxt scaffold ✅  
2. Supabase project + env keys ✅  
3. DB migrations ✅  
4. Supabase Auth (Google) with Gmail scope ✅  
5. Supabase client plugin ✅  
6. Login / callback / dashboard / settings pages 🔲  
7. Edge Function syncGmail() 🔲  
8. REST endpoints 🔲  
9. Digest scheduler & SendGrid integration 🔲  
10. Unit & E2E tests 🔲  
11. Deployment pipeline 🔲  

---

## 8 Open Questions / Future Work  

* LLM parser cost vs. accuracy.  
* Stripe webhook support for receipts outside Gmail.  
* UX for linking multiple mailboxes.  

---

*End of authoritative requirements. Modify this document before implementing any change.*

================
File: assets/css/global.css
================
/* Basic Reset */
*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  font-size: 32px; /* Set root font size to double the default (16px) */
}

html,
body {
  height: 100%;
}

body {
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  background-color: var(--color-bg);
  color: var(--color-text);
  font-size: 1rem; /* Ensure body text uses the new root font size */
}

img, picture, video, canvas, svg {
  display: block;
  max-width: 100%;
}

input, button, textarea, select {
  font: inherit;
}

p, h1, h2, h3, h4, h5, h6 {
  overflow-wrap: break-word;
}

a {
  color: inherit;
  text-decoration: none;
}

/* CSS Variables */
:root {
  --color-bg: #ffffff;
  --color-text: #1f2937;
  --color-accent: #4f46e5;
  --color-accent-hover: #4338ca;
  --color-muted: #6b7280;
  --color-border: #e5e7eb;
  --color-error-bg: #fee2e2;
  --color-error-text: #b91c1c;

  /* Doubled Spacing */
  --space-xs: 8px;   /* was 4px */
  --space-sm: 16px;  /* was 8px */
  --space-md: 32px;  /* was 16px */
  --space-lg: 48px;  /* was 24px */
  --space-xl: 64px;  /* was 32px */
  --space-2xl: 96px; /* was 48px */

  /* Base Font Size (set on html element now) */
  /* --font-base: 32px; */ /* Variable removed/commented as font-size is set on html */

  /* Font Scale (Original rem values - will scale with html font-size) */
  --font-sm: 0.875rem; /* 14px @ 16px base -> 28px @ 32px base */
  --font-lg: 1.125rem; /* 18px @ 16px base -> 36px @ 32px base */
  --font-xl: 1.25rem;  /* 20px @ 16px base -> 40px @ 32px base */
  --font-2xl: 1.5rem;  /* 24px @ 16px base -> 48px @ 32px base */
  --font-3xl: 1.875rem; /* 30px @ 16px base -> 60px @ 32px base */

  /* Adjusted border-radius slightly */
  --border-radius-sm: 6px;
  --border-radius-md: 12px;  /* was 8px */
  --border-radius-lg: 24px;  /* was 16px */

  --box-shadow: 0 2px 6px 0 rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); /* Adjusted slightly */
  --box-shadow-md: 0 8px 12px -2px rgb(0 0 0 / 0.1), 0 4px 8px -4px rgb(0 0 0 / 0.1); /* Adjusted slightly */
  --box-shadow-lg: 0 20px 30px -6px rgb(0 0 0 / 0.1), 0 8px 12px -8px rgb(0 0 0 / 0.1); /* Adjusted slightly */

  --transition-duration: 150ms;
  --transition-timing: ease-in-out;
}

================
File: components/AppButton.vue
================
<template>
  <button class="app-button" :class="variantClass">
    <slot />
  </button>
</template>

<script setup>
import { computed } from 'vue'

const props = defineProps({
  variant: {
    type: String,
    default: 'primary', // e.g., primary, secondary, danger, ghost
  },
})

const variantClass = computed(() => {
  return `button-${props.variant}`;
})
</script>

<style scoped>
.app-button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: var(--space-sm) var(--space-lg);
  border-radius: var(--border-radius-md);
  border: 1px solid transparent;
  font-weight: 500;
  font-size: var(--font-base);
  cursor: pointer;
  transition-property: background-color, border-color, color, box-shadow;
  transition-duration: var(--transition-duration);
  transition-timing-function: var(--transition-timing);
  white-space: nowrap;
  user-select: none;
  text-decoration: none; /* For links styled as buttons */
}

/* Primary Button (Default) */
.button-primary {
  background-color: var(--color-accent);
  color: var(--color-bg);
  border-color: var(--color-accent);
}

.button-primary:hover {
  background-color: var(--color-accent-hover);
  border-color: var(--color-accent-hover);
}

.button-primary:focus-visible {
  outline: 2px solid var(--color-accent);
  outline-offset: 2px;
}

/* Secondary Button */
.button-secondary {
  background-color: var(--color-bg);
  color: var(--color-accent);
  border-color: var(--color-accent);
}

.button-secondary:hover {
  background-color: #f0f0ff; /* Lighter accent shade */
}

.button-secondary:focus-visible {
  outline: 2px solid var(--color-accent);
  outline-offset: 2px;
}

/* Ghost Button */
.button-ghost {
  background-color: transparent;
  color: var(--color-accent);
  border-color: transparent;
}

.button-ghost:hover {
  background-color: #f0f0ff; /* Lighter accent shade */
}

.button-ghost:focus-visible {
  outline: 2px solid var(--color-accent);
  outline-offset: 2px;
}

/* Danger Button (Example) */
.button-danger {
  background-color: var(--color-error-text);
  color: var(--color-bg);
  border-color: var(--color-error-text);
}

.button-danger:hover {
  background-color: #991b1b; /* Darker error color */
  border-color: #991b1b;
}

.button-danger:focus-visible {
  outline: 2px solid var(--color-error-text);
  outline-offset: 2px;
}

/* Add styles for :active, :disabled states as needed */
.app-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}
</style>

================
File: components/AppCard.vue
================
<template>
  <div class="app-card">
    <div v-if="hasHeaderSlot || title" class="card-header">
      <slot name="header">
        <h3 v-if="title" class="card-title">{{ title }}</h3>
      </slot>
    </div>
    <div class="card-body">
      <slot />
    </div>
    <div v-if="hasFooterSlot" class="card-footer">
      <slot name="footer" />
    </div>
  </div>
</template>

<script setup>
import { useSlots } from 'vue'

const props = defineProps({
  title: {
    type: String,
    default: null,
  },
})

const slots = useSlots()
const hasHeaderSlot = computed(() => !!slots.header)
const hasFooterSlot = computed(() => !!slots.footer)
</script>

<style scoped>
.app-card {
  background-color: var(--color-bg);
  border-radius: var(--border-radius-lg);
  border: 1px solid var(--color-border);
  box-shadow: var(--box-shadow);
  overflow: hidden; /* Ensures content respects border-radius */
  transition: box-shadow var(--transition-duration) var(--transition-timing);
}

/* Optional: Add hover effect */
/*
.app-card:hover {
  box-shadow: var(--box-shadow-md);
}
*/

.card-header {
  padding: var(--space-md) var(--space-lg);
  border-bottom: 1px solid var(--color-border);
  background-color: #f9fafb; /* Slightly off-white header */
}

.card-title {
  font-size: var(--font-lg);
  font-weight: 600;
  color: var(--color-text);
  margin: 0; /* Reset heading margin */
}

.card-body {
  padding: var(--space-lg);
}

.card-footer {
  padding: var(--space-md) var(--space-lg);
  border-top: 1px solid var(--color-border);
  background-color: #f9fafb; /* Slightly off-white footer */
  font-size: var(--font-sm);
  color: var(--color-muted);
}
</style>

================
File: components/AppSpinner.vue
================
<template>
  <div class="spinner-container" aria-busy="true" aria-live="polite">
    <div class="spinner"></div>
    <span class="sr-only">Loading...</span>
  </div>
</template>

<style scoped>
.spinner-container {
  display: flex;
  align-items: center;
  justify-content: center;
  /* Add height/width or positioning as needed where used */
}

.spinner {
  border: 4px solid rgba(0, 0, 0, 0.1);
  width: 36px;
  height: 36px;
  border-radius: 50%;
  border-left-color: var(--color-accent);

  animation: spin 1s ease infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* Screen reader only text */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}
</style>

================
File: components/ErrorBanner.vue
================
<template>
  <div
    v-if="message"
    class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative"
    role="alert"
  >
    <strong class="font-bold">Error:</strong>
    <span class="block sm:inline">{{ message }}</span>
  </div>
</template>

<script setup>
defineProps({
  message: {
    type: String,
    default: ''
  }
})
</script>

<style scoped>
/* Add any specific styles if needed */
</style>

================
File: components/GoogleSignInButton.vue
================
<template>
  <button
    @click="$emit('click')"
    class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
  >
    <!-- Placeholder for Google Icon -->
    <span class="mr-2">G</span>
    Sign in with Google
  </button>
</template>

<script setup>
defineEmits(['click'])
</script>

<style scoped>
/* Add any specific styles if needed */
</style>

================
File: components/LogoutButton.vue
================
<template>
  <button
    @click="$emit('click')"
    class="px-3 py-1 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
  >
    Logout
  </button>
</template>

<script setup>
defineEmits(['click'])
</script>

<style scoped>
/* Add any specific styles if needed */
</style>

================
File: layouts/default.vue
================
<template>
  <div class="app-layout">
    <header class="app-header">
      <div class="container header-container">
        <div class="logo">SubTracker</div>
        <nav class="navigation">
          <NuxtLink to="/">Dashboard</NuxtLink>
          <NuxtLink to="/settings">Settings</NuxtLink>
          <!-- Add more nav links as needed -->
        </nav>
        <div class="user-profile">
          <!-- Placeholder for user avatar/login status -->
          <span v-if="user">{{ user.email }}</span>
          <NuxtLink v-else to="/login">Login</NuxtLink>
        </div>
      </div>
    </header>

    <main class="main-content">
      <div class="container">
        <slot />
      </div>
    </main>

    <footer class="app-footer">
      <div class="container">
        <p>&copy; {{ new Date().getFullYear() }} SubTracker. All rights reserved.</p>
      </div>
    </footer>
  </div>
</template>

<script setup>
// Placeholder for user state - replace with actual auth logic later
// const user = useSupabaseUser() // Example if using Nuxt Supabase module
const user = ref(null) // Simulate logged out state

// If using Supabase client directly
// import { useSupabaseClient } from '#imports'
// const supabase = useSupabaseClient()
// const { data: { user } } = await supabase.auth.getUser()
</script>

<style scoped>
.app-layout {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.container {
  width: 100%;
  max-width: 70%;
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--space-md);
  padding-right: var(--space-md);
}

.app-header {
  position: sticky; /* Make header fixed if desired */
  top: 0;
  z-index: 10;
  background-color: var(--color-bg);
  border-bottom: 1px solid var(--color-border);
  padding-top: var(--space-md);
  padding-bottom: var(--space-md);
  box-shadow: var(--box-shadow);
}

.header-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.logo {
  font-weight: 700;
  font-size: var(--font-xl);
  color: var(--color-accent);
}

.navigation a {
  margin: 0 var(--space-md);
  color: var(--color-text);
  position: relative;
  padding-bottom: var(--space-xs);
  transition: color var(--transition-duration) var(--transition-timing);
}

.navigation a::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 2px;
  background-color: var(--color-accent);
  transform: scaleX(0);
  transform-origin: bottom right;
  transition: transform var(--transition-duration) var(--transition-timing);
}

.navigation a:hover,
.navigation a.router-link-exact-active {
  color: var(--color-accent);
}

.navigation a:hover::after,
.navigation a.router-link-exact-active::after {
  transform: scaleX(1);
  transform-origin: bottom left;
}

.user-profile {
  font-size: var(--font-sm);
  color: var(--color-muted);
}

.user-profile a {
  color: var(--color-accent);
  text-decoration: underline;
  text-underline-offset: 2px;
}

.main-content {
  flex-grow: 1;
  padding-top: var(--space-xl);
  padding-bottom: var(--space-xl);
}

.app-footer {
  background-color: var(--color-bg);
  border-top: 1px solid var(--color-border);
  padding: var(--space-md) 0;
  margin-top: var(--space-2xl);
  text-align: center;
  font-size: var(--font-sm);
  color: var(--color-muted);
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .navigation {
    display: none; /* Simple hide for mobile, can implement burger menu later */
  }
  .header-container {
    justify-content: space-between;
  }
}
</style>

================
File: pages/auth/callback.vue
================
<template>
  <div class="flex flex-col items-center justify-center min-h-screen">
    <div v-if="loading" class="text-center">
      <p>Completing sign-in...</p>
      <!-- Basic Spinner Placeholder -->
    </div>
    <div v-else-if="errorMessage">
      <ErrorBanner :message="errorMessage" class="mb-4" />
      <NuxtLink to="/login" class="text-indigo-600 hover:text-indigo-800">
        Retry Login
      </NuxtLink>
    </div>
    <div v-else>
      <p>Redirecting...</p>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { useRouter } from 'vue-router' // Use vue-router directly or Nuxt's useRouter
import { useSupabaseClient } from '#supabase/client'

// Assuming useSupabaseClient composable is available
const supabase = useSupabaseClient()
const router = useRouter() // Or useNuxtApp().$router in some Nuxt contexts

const loading = ref(true)
const errorMessage = ref('')

onMounted(async () => {
  // Supabase client should automatically handle the session
  // when initialized, especially with the Nuxt module.
  // We might not need getSessionFromUrl explicitly if using nuxt/supabase
  // Let's watch the auth state instead for robustness

  const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
    // Unsubscribe after first event or navigation
    if (subscription) {
      subscription.unsubscribe()
    }

    if (event === 'SIGNED_IN' && session) {
      // Successfully signed in
      loading.value = false
      router.push('/dashboard')
    } else if (event === 'SIGNED_OUT') {
      // Handle potential sign-out during callback?
      loading.value = false
      errorMessage.value = 'Session ended unexpectedly. Please try logging in again.'
      router.push('/login') // Redirect to login if sign out happens
    } else if (event === 'INITIAL_SESSION') {
       // If a session already exists when page loads
       if (session) {
          loading.value = false
          router.push('/dashboard')
       } else {
         // If no session, maybe there was an error in the URL hash
         // Let's explicitly try getSessionFromUrl as a fallback or primary method
         // If the watcher doesn't fire SIGNED_IN quickly.
         // This part depends heavily on how @nuxtjs/supabase handles the flow.
         // For now, keep it simple assuming the watcher works.
         // If issues arise, we might need getSessionFromUrl().
         // Consider adding a timeout? If SIGNED_IN doesn't fire after ~5s, show error.
         loading.value = false;
         errorMessage.value = 'Failed to process authentication callback. Please retry.';
       }
    } else if (event === 'AUTH_CODE_ERROR') {
      // Handle specific OAuth errors if possible
      loading.value = false;
      errorMessage.value = 'There was an error during authentication. Please retry.';
    }
    // Other events like TOKEN_REFRESHED, USER_UPDATED might occur
  });

  // Timeout fallback in case onAuthStateChange doesn't fire as expected
  setTimeout(() => {
    if (loading.value) {
      loading.value = false;
      errorMessage.value = 'Authentication timed out. Please try again.';
      // Consider explicitly calling getSession to double-check
      // const { data: { session } } = await supabase.auth.getSession()
      // if (session) router.push('/dashboard')
    }
  }, 10000); // 10 second timeout

});

// Optional: Define layout
// definePageMeta({ layout: 'minimal' });
</script>

<style scoped>
/* Add any specific styles if needed */
</style>

================
File: pages/dashboard.vue
================
<template>
  <div>
    <!-- Header -->
    <header class="flex justify-between items-center p-4 border-b">
      <div v-if="user" class="flex items-center">
        <!-- Placeholder for Avatar -->
        <div class="w-8 h-8 rounded-full bg-gray-300 mr-3"></div>
        <span>{{ user.email }}</span>
      </div>
      <LogoutButton @click="handleLogout" />
    </header>

    <!-- Main Content -->
    <main class="p-6">
      <h1 class="text-2xl font-semibold mb-4">Dashboard</h1>

      <!-- Placeholder for Scope Notice -->
      <!-- <ScopeNotice v-if="needsGmailScope" /> -->

      <div class="mb-6">
        <!-- Placeholder for SubscriptionSummary -->
        <div class="bg-gray-100 p-4 rounded shadow">
          <h2 class="font-bold mb-2">Subscription Summary</h2>
          <p>Total Spend: $XXX.XX</p>
          <p>Upcoming Renewals: X</p>
        </div>
      </div>

      <div class="mb-6">
         <!-- Placeholder for SubscriptionList -->
         <div class="bg-gray-100 p-4 rounded shadow">
            <h2 class="font-bold mb-2">Subscription List</h2>
            <ul>
                <li>Vendor A - $10.00 - Renews 2024-08-01</li>
                <li>Vendor B - $15.00 - Renews 2024-08-15</li>
            </ul>
         </div>
      </div>

      <div>
        <button
           class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
           @click="handleRefreshEmails"
         >
           Refresh Emails
         </button>
         <!-- Add loading/success/error state for refresh -->
      </div>

    </main>
  </div>
</template>

<script setup>
import { ref, onMounted, watchEffect } from 'vue'
import { useRouter } from 'vue-router'
import { useSupabaseClient, useSupabaseUser } from '#supabase/client'

// Composables for Supabase and user state
const supabase = useSupabaseClient()
const user = useSupabaseUser()
const router = useRouter()

// Placeholder state for Gmail scope check
// const needsGmailScope = ref(false);

// Check user authentication state on mount
onMounted(() => {
  // Redirect to login if user is not authenticated
  // This might be handled globally by middleware as well
  watchEffect(() => {
      if (!user.value) {
          router.push('/login')
      }
  })

  // Placeholder: Check if current session has gmail.readonly scope
  // checkGmailScope();
});

// async function checkGmailScope() {
//   const { data: { session }, error } = await supabase.auth.getSession();
//   if (session && session.provider_token) {
//     // A simple check (might be insufficient) - ideally check decoded JWT or user metadata
//     // This requires a more robust check, potentially involving server-side verification
//     // or parsing the access token claims if available client-side (not recommended for security).
//     // Supabase helper functions or custom logic might be needed.
//     // For now, assume scope is granted if provider_token exists, which is NOT accurate.
//     console.log('Provider token exists, assuming scope granted for now.');
//     needsGmailScope.value = false; 
//   } else {
//     console.warn('Provider token missing or session error:', error);
//     needsGmailScope.value = true;
//   }
// }

async function handleLogout() {
  const { error } = await supabase.auth.signOut()
  if (error) {
    console.error('Error logging out:', error)
    // Optionally show an error message to the user
  } else {
    // Redirect handled by auth state watcher or middleware
     router.push('/login'); // Explicit redirect just in case
  }
}

function handleRefreshEmails() {
  console.log('Refresh Emails button clicked - Implement manual trigger logic here');
  // This should likely call a backend endpoint (e.g., Edge Function trigger)
  // e.g., await $fetch('/api/gmail/sync', { method: 'POST' })
}

// Use default layout or specify another one
// definePageMeta({ layout: 'default' });
</script>

<style scoped>
/* Add component-specific styles */
</style>

================
File: pages/index.vue
================
<template>
  <div class="dashboard-page">
    <div class="dashboard-header">
      <h1>Your Subscription Dashboard</h1>
      <AppButton @click="refreshEmails" :disabled="isLoading">
        <span v-if="isLoading">
          <AppSpinner style="width: 1em; height: 1em; border-width: 2px; margin-right: var(--space-sm);"/> Refreshing...
        </span>
        <span v-else>
          Refresh Emails
        </span>
      </AppButton>
    </div>

    <div v-if="isLoading" class="loading-overlay">
       <AppSpinner />
       <p>Loading your dashboard...</p>
    </div>

    <div v-else class="dashboard-grid">
      <AppCard title="Spending Overview" class="overview-card">
        <p>Total Monthly Spend: <strong>$XXX.XX</strong></p>
        <p>Total Yearly Spend: <strong>$YYYY.YY</strong></p>
        <div class="placeholder-chart" aria-label="Placeholder for spending chart">Chart Area</div>
      </AppCard>

      <AppCard title="Upcoming Renewals" class="renewals-card">
        <ul>
          <li>Netflix - $15.99 - Renews Oct 30</li>
          <li>Spotify - $10.99 - Renews Nov 5</li>
          <li>AWS - Est. $25.00 - Renews Nov 1</li>
        </ul>
        <template #footer>
          <NuxtLink to="/subscriptions">View all subscriptions</NuxtLink>
        </template>
      </AppCard>

      <AppCard title="Category Breakdown" class="category-card">
        <ul>
          <li>Streaming: $XX.XX</li>
          <li>Music: $YY.YY</li>
          <li>Cloud Services: $ZZ.ZZ</li>
        </ul>
         <div class="placeholder-chart small" aria-label="Placeholder for category breakdown chart">Chart Area</div>
      </AppCard>

    </div>

  </div>
</template>

<script setup>
definePageMeta({
  layout: 'default',
})

const isLoading = ref(false)

const refreshEmails = async () => {
  console.log('Refreshing emails...');
  isLoading.value = true;
  await new Promise(resolve => setTimeout(resolve, 2000));
  isLoading.value = false;
  console.log('Email refresh complete (simulated).');
}

onMounted(() => {
})
</script>

<style scoped>
.dashboard-page {
}

.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--space-xl);
  flex-wrap: wrap;
  gap: var(--space-md);
}

.dashboard-header h1 {
  font-size: var(--font-2xl);
  font-weight: 600;
  margin: 0;
}

.loading-overlay {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: var(--space-2xl);
  min-height: 300px;
  color: var(--color-muted);
}
.loading-overlay p {
  margin-top: var(--space-md);
}

.dashboard-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: var(--space-lg);
}

ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

li {
  padding: var(--space-sm) 0;
  border-bottom: 1px solid var(--color-border);
}

li:last-child {
  border-bottom: none;
}

.renewals-card ul,
.category-card ul {
  margin-bottom: var(--space-md);
}

.renewals-card a {
  color: var(--color-accent);
  text-decoration: underline;
  text-underline-offset: 2px;
}

.placeholder-chart {
  height: 150px;
  background-color: #f3f4f6;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--color-muted);
  border-radius: var(--border-radius-md);
  margin-top: var(--space-md);
  font-style: italic;
}

.placeholder-chart.small {
    height: 100px;
}

.empty-state {
  text-align: center;
  padding: var(--space-2xl);
  margin-top: var(--space-xl);
  border: 2px dashed var(--color-border);
  border-radius: var(--border-radius-lg);
}

.empty-illustration {
  max-width: 150px;
  margin: 0 auto var(--space-lg);
  opacity: 0.7;
}

.empty-state h2 {
  font-size: var(--font-xl);
  margin-bottom: var(--space-sm);
}

.empty-state p {
  color: var(--color-muted);
  margin-bottom: var(--space-lg);
}
</style>

================
File: pages/login.vue
================
<template>
  <div class="flex flex-col items-center justify-center min-h-screen">
    <h1 class="text-3xl font-bold mb-6">Subscription Tracker</h1>
    <div class="w-full max-w-xs">
      <ErrorBanner :message="errorMessage" class="mb-4" />

      <GoogleSignInButton @click="handleSignIn" :disabled="loading" />

      <div v-if="loading" class="mt-4 text-center">
        <!-- Basic Spinner Placeholder -->
        <p>Loading...</p>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { useSupabaseClient } from '#supabase/client'

// Assume useSupabaseClient composable provides the Supabase instance
const supabase = useSupabaseClient()

const loading = ref(false)
const errorMessage = ref('')

async function handleSignIn() {
  loading.value = true
  errorMessage.value = ''

  try {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        scopes: 'openid email profile https://www.googleapis.com/auth/gmail.readonly',
        // Optional: specify redirect URL if needed, otherwise Supabase defaults
        // redirectTo: `${window.location.origin}/auth/callback`
      }
    })

    if (error) throw error

    // If successful, Supabase handles the redirect automatically.
    // Loading state will persist until the page redirects.

  } catch (error) {
    console.error('Error signing in with Google:', error)
    errorMessage.value = error.error_description || error.message || 'An unexpected error occurred.'
    loading.value = false
  }
}

// Define page meta or layout if necessary
// definePageMeta({ layout: 'auth' });
</script>

<style scoped>
/* Add any specific styles if needed */
</style>

================
File: pages/settings.vue
================
<template>
  <div>
    <!-- Use the same header or a dedicated settings layout header -->
    <header class="flex justify-between items-center p-4 border-b">
       <h1 class="text-xl font-semibold">Settings</h1>
       <!-- Optional: Add navigation back to dashboard or user info -->
       <NuxtLink to="/dashboard" class="text-indigo-600 hover:text-indigo-800">Back to Dashboard</NuxtLink>
    </header>

    <main class="p-6 space-y-6">
      <!-- Section: Re-Consent Gmail Access -->
      <section class="p-4 border rounded shadow">
        <h2 class="text-lg font-medium mb-3">Gmail Access</h2>
        <div v-if="needsReGrant" class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative mb-4">
          <p>Gmail access scope might be missing or revoked. Grant access to enable email scanning.</p>
          <button
            @click="handleReConsent"
            class="mt-2 px-3 py-1 bg-yellow-500 text-white rounded hover:bg-yellow-600"
            :disabled="loadingReconsent"
           >
             {{ loadingReconsent ? 'Processing...' : 'Grant Gmail Access' }}
          </button>
           <p v-if="reconsentError" class="text-red-600 text-sm mt-1">{{ reconsentError }}</p>
        </div>
        <div v-else>
          <p class="text-green-700">Gmail read-only access is currently granted.</p>
          <!-- Optional: Add button to revoke? Requires careful handling -->
        </div>
      </section>

      <!-- Section: Session Info -->
      <section class="p-4 border rounded shadow">
        <h2 class="text-lg font-medium mb-3">Session Information</h2>
        <div v-if="sessionInfo">
          <p><strong>User ID:</strong> {{ sessionInfo.user?.id }}</p>
          <p><strong>Email:</strong> {{ sessionInfo.user?.email }}</p>
          <p><strong>Expires At:</strong> {{ sessionInfo.expires_at ? new Date(sessionInfo.expires_at * 1000).toLocaleString() : 'N/A' }}</p>
          <p><strong>Granted Scopes:</strong></p>
          <!-- Displaying scopes requires parsing the access token or having metadata. -->
          <!-- Supabase provider_token doesn't directly expose scopes easily client-side -->
          <ul class="list-disc list-inside ml-4 text-sm">
            <li>openid</li>
            <li>email</li>
            <li>profile</li>
            <li :class="{ 'text-green-700 font-semibold': hasGmailScope, 'text-red-600': !hasGmailScope }">
               https://www.googleapis.com/auth/gmail.readonly {{ hasGmailScope ? '(Granted)' : '(Missing/Revoked?)' }}
            </li>
            <!-- Note: This scope list is assumed based on login request -->
          </ul>
        </div>
        <div v-else>
          <p>Loading session information...</p>
        </div>
         <button
            @click="refreshSessionInfo"
            class="mt-3 px-3 py-1 border border-gray-300 text-sm rounded hover:bg-gray-50"
            :disabled="loadingSession"
         >
           {{ loadingSession ? 'Refreshing...' : 'Refresh Session' }}
         </button>
      </section>

       <!-- Section: Digest Preferences (Placeholder from prd2.md) -->
       <section class="p-4 border rounded shadow">
         <h2 class="text-lg font-medium mb-3">Digest Preferences</h2>
         <p>Configure email digest frequency (Monthly, Weekly, Off).</p>
         <!-- Placeholder for <DigestPrefsForm> -->
         <div class="mt-2 text-gray-500">
           (Digest preference form TBD)
         </div>
       </section>

    </main>
  </div>
</template>

<script setup>
import { ref, onMounted, computed, watchEffect } from 'vue'
import { useSupabaseClient, useSupabaseUser } from '#supabase/client'
import { useRouter } from 'vue-router'

const supabase = useSupabaseClient()
const user = useSupabaseUser()

const sessionInfo = ref(null)
const needsReGrant = ref(false) // Will be updated based on scope check
const hasGmailScope = ref(false) // Derived from session check
const loadingSession = ref(false)
const loadingReconsent = ref(false)
const reconsentError = ref('')

async function fetchSessionData() {
  loadingSession.value = true
  const { data, error } = await supabase.auth.getSession()
  if (error) {
    console.error('Error fetching session:', error)
    sessionInfo.value = { error: error.message }
  } else if (data.session) {
    sessionInfo.value = {
        user: data.session.user,
        expires_at: data.session.expires_at,
        // provider_token: data.session.provider_token, // Use cautiously
        // access_token: data.session.access_token // Use cautiously
    }
    // Placeholder Check for Gmail Scope:
    // This is a simplified check. A robust solution might involve:
    // 1. Decoding the access_token (if JWT) client-side (less secure, exposes token)
    // 2. Calling a secure backend endpoint that verifies the token with Google.
    // 3. Storing granted scopes in user_metadata upon login/refresh via an Edge Function/Hook.
    // Assuming for now: if provider_token exists, scope *might* be okay.
    hasGmailScope.value = !!data.session.provider_token; // VERY BASIC CHECK
    needsReGrant.value = !hasGmailScope.value;

  } else {
     sessionInfo.value = null; // No active session
     needsReGrant.value = true; // Assume regrant needed if no session
     hasGmailScope.value = false;
  }
  loadingSession.value = false
}

function refreshSessionInfo() {
    fetchSessionData();
}

async function handleReConsent() {
  loadingReconsent.value = true
  reconsentError.value = ''
  try {
    // Use the same signInWithOAuth function as the login page
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        scopes: 'openid email profile https://www.googleapis.com/auth/gmail.readonly',
        // Crucially, Google might automatically skip consent if already granted
        // or prompt only for the missing scope.
        // redirectTo: `${window.location.origin}/settings` // Redirect back to settings?
      }
    })
    if (error) throw error
    // Redirect might happen, or page might reload/re-render. Watch for session changes.
  } catch (error) {
    console.error('Error during re-consent:', error)
    reconsentError.value = error.error_description || error.message || 'Failed to re-grant access.'
  } finally {
      loadingReconsent.value = false
      // Re-fetch session data after attempt
      // Might need a slight delay or rely on auth watcher
      setTimeout(fetchSessionData, 1000);
  }
}

onMounted(() => {
  fetchSessionData()

  // Redirect to login if user is not authenticated
   watchEffect(() => {
       if (!user.value) {
           const router = useRouter()
           router.push('/login')
       }
   })
});

// Optional: Define layout
// definePageMeta({ layout: 'default' });
</script>

<style scoped>
/* Add component-specific styles */
</style>

================
File: plugins/supabase.client.ts
================
import { createClient } from '@supabase/supabase-js'

export default defineNuxtPlugin(nuxtApp => {
  const config = useRuntimeConfig()

  const supabaseUrl = config.public.supabaseUrl
  const supabaseKey = config.public.supabaseKey

  if (!supabaseUrl || !supabaseKey) {
    console.error('Supabase URL or Key is missing. Make sure SUPABASE_URL and SUPABASE_KEY are set in your .env file and exposed in nuxt.config.ts')
    // Optionally handle the error, e.g., redirect to an error page or show a notification
    return
  }

  const supabase = createClient(supabaseUrl, supabaseKey)

  // Make the Supabase client available globally in the Nuxt app
  // You can access it via nuxtApp.$supabase or useSupabaseClient() composable (if you create one)
  nuxtApp.provide('supabase', supabase)

  console.log('Supabase client initialized')
})

================
File: public/robots.txt
================
User-Agent: *
Disallow:

================
File: server/tsconfig.json
================
{
  "extends": "../.nuxt/tsconfig.server.json"
}

================
File: .gitignore
================
# Nuxt dev/build outputs
.output
.data
.nuxt
.nitro
.cache
dist

# Node dependencies
node_modules

# Logs
logs
*.log

# Misc
.DS_Store
.fleet
.idea

# Local env files
.env
.env.*
!.env.example

================
File: .repomixignore
================
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/

================
File: app.vue
================
<template>
  <div>
    <NuxtLayout>
      <NuxtPage />
    </NuxtLayout>
  </div>
</template>

<style>
/* Import global styles */
@import "~/assets/css/global.css";
</style>

================
File: eslint.config.mjs
================
// @ts-check
import withNuxt from './.nuxt/eslint.config.mjs'

export default withNuxt(
  // Your custom configs here
)

================
File: nuxt.config.ts
================
// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  compatibilityDate: '2024-11-01',
  devtools: { enabled: true },

  runtimeConfig: {
    // Private keys are only available on the server
    // supabaseServiceKey: process.env.SUPABASE_SERVICE_KEY,
    // Public keys that are exposed to the client, prefix with 'public'
    public: {
      supabaseUrl: process.env.SUPABASE_URL,
      supabaseKey: process.env.SUPABASE_KEY,
    }
  },

  modules: [
    '@nuxtjs/supabase',
    '@nuxt/eslint',
    '@nuxt/icon',
    '@nuxt/image',
    '@nuxt/scripts'
  ],

  supabase: {
    url: process.env.SUPABASE_URL,
    key: process.env.SUPABASE_KEY,
    redirectOptions: {
      login: '/login',
      callback: '/auth/callback',
      exclude: [],
    }
  }
})

================
File: package.json
================
{
  "name": "nuxt-app",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "nuxt build",
    "dev": "nuxt dev",
    "generate": "nuxt generate",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare"
  },
  "dependencies": {
    "@nuxt/eslint": "^1.3.0",
    "@nuxt/icon": "^1.12.0",
    "@nuxt/image": "^1.10.0",
    "@nuxt/scripts": "^0.11.6",
    "@supabase/supabase-js": "^2.49.4",
    "@unhead/vue": "^2.0.8",
    "eslint": "^9.24.0",
    "nuxt": "^3.16.2",
    "vue": "^3.5.13",
    "vue-router": "^4.5.0"
  },
  "devDependencies": {
    "@nuxtjs/supabase": "^1.5.0"
  }
}

================
File: README.md
================
# Nuxt Minimal Starter

Look at the [Nuxt documentation](https://nuxt.com/docs/getting-started/introduction) to learn more.

## Setup

Make sure to install dependencies:

```bash
# npm
npm install

# pnpm
pnpm install

# yarn
yarn install

# bun
bun install
```

## Development Server

Start the development server on `http://localhost:3000`:

```bash
# npm
npm run dev

# pnpm
pnpm dev

# yarn
yarn dev

# bun
bun run dev
```

## Production

Build the application for production:

```bash
# npm
npm run build

# pnpm
pnpm build

# yarn
yarn build

# bun
bun run build
```

Locally preview production build:

```bash
# npm
npm run preview

# pnpm
pnpm preview

# yarn
yarn preview

# bun
bun run preview
```

Check out the [deployment documentation](https://nuxt.com/docs/getting-started/deployment) for more information.

================
File: repomix.config.json
================
{
  "output": {
    "filePath": "repomix-output.txt",
    "style": "plain",
    "parsableStyle": false,
    "fileSummary": true,
    "directoryStructure": true,
    "removeComments": false,
    "removeEmptyLines": false,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  },
  "tokenCount": {
    "encoding": "o200k_base"
  }
}

================
File: tsconfig.json
================
{
  // https://nuxt.com/docs/guide/concepts/typescript
  "extends": "./.nuxt/tsconfig.json"
}
